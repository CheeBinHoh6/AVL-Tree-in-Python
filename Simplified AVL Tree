# I created an implementation of a self-balancing binary (AVL) tree in Python that populates nodes with 
# the corresponding word and embedding pairs from the given lists. Referencing NLP's and a Natural Language Toolkit.

import re

class Node:
    def __init__(self, word, embedding):
        self.word = word
        self.embedding = embedding
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def __init__(self):
        self.root = None

    def get_height(self, node):
        if node is None:
            return 0
        return node.height

    def get_balance(self, node):
        if node is None:
            return 0
        return self.get_height(node.left) - self.get_height(node.right)

    def rotate_right(self, z):
        y = z.left
        T3 = y.right

        y.right = z
        z.left = T3

        z.height = 1 + max(self.get_height(z.left),
                           self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left),
                           self.get_height(y.right))

        return y

    def rotate_left(self, z):
        y = z.right
        T2 = y.left

        y.left = z
        z.right = T2

        z.height = 1 + max(self.get_height(z.left),
                           self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left),
                           self.get_height(y.right))

        return y

    def insert(self, word, embedding):
        if not re.match(r'[A-Za-z]', word[0]):
            return

        def _insert(node, word, embedding):
            if node is None:
                return Node(word, embedding)
            elif word < node.word:
                node.left = _insert(node.left, word, embedding)
            else:
                node.right = _insert(node.right, word, embedding)

            node.height = 1 + max(self.get_height(node.left),
                                  self.get_height(node.right))
            balance = self.get_balance(node)

            if balance > 1 and word < node.left.word:
                return self.rotate_right(node)

            if balance < -1 and word > node.right.word:
                return self.rotate_left(node)

            if balance > 1 and word > node.left.word:
                node.left = self.rotate_left(node.left)
                return self.rotate_right(node)

            if balance < -1 and word < node.right.word:
                node.right = self.rotate_right(node.right)
                return self.rotate_left(node)

            return node
        self.root = _insert(self.root, word, embedding)
